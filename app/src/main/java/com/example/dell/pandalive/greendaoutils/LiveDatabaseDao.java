package com.example.dell.pandalive.greendaoutils;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.pandalive.greendaoform.LiveDatabase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE_DATABASE".
*/
public class LiveDatabaseDao extends AbstractDao<LiveDatabase, Long> {

    public static final String TABLENAME = "LIVE_DATABASE";

    /**
     * Properties of entity LiveDatabase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Limg = new Property(1, String.class, "limg", false, "LIMG");
        public final static Property Lname = new Property(2, String.class, "lname", false, "LNAME");
        public final static Property Ltime = new Property(3, String.class, "ltime", false, "LTIME");
        public final static Property Ldate = new Property(4, String.class, "ldate", false, "LDATE");
        public final static Property Lbofang = new Property(5, String.class, "lbofang", false, "LBOFANG");
        public final static Property Lpanduan = new Property(6, String.class, "lpanduan", false, "LPANDUAN");
    };


    public LiveDatabaseDao(DaoConfig config) {
        super(config);
    }
    
    public LiveDatabaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE_DATABASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LIMG\" TEXT," + // 1: limg
                "\"LNAME\" TEXT," + // 2: lname
                "\"LTIME\" TEXT," + // 3: ltime
                "\"LDATE\" TEXT," + // 4: ldate
                "\"LBOFANG\" TEXT," + // 5: lbofang
                "\"LPANDUAN\" TEXT);"); // 6: lpanduan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE_DATABASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LiveDatabase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String limg = entity.getLimg();
        if (limg != null) {
            stmt.bindString(2, limg);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(3, lname);
        }
 
        String ltime = entity.getLtime();
        if (ltime != null) {
            stmt.bindString(4, ltime);
        }
 
        String ldate = entity.getLdate();
        if (ldate != null) {
            stmt.bindString(5, ldate);
        }
 
        String lbofang = entity.getLbofang();
        if (lbofang != null) {
            stmt.bindString(6, lbofang);
        }
 
        String lpanduan = entity.getLpanduan();
        if (lpanduan != null) {
            stmt.bindString(7, lpanduan);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LiveDatabase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String limg = entity.getLimg();
        if (limg != null) {
            stmt.bindString(2, limg);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(3, lname);
        }
 
        String ltime = entity.getLtime();
        if (ltime != null) {
            stmt.bindString(4, ltime);
        }
 
        String ldate = entity.getLdate();
        if (ldate != null) {
            stmt.bindString(5, ldate);
        }
 
        String lbofang = entity.getLbofang();
        if (lbofang != null) {
            stmt.bindString(6, lbofang);
        }
 
        String lpanduan = entity.getLpanduan();
        if (lpanduan != null) {
            stmt.bindString(7, lpanduan);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LiveDatabase readEntity(Cursor cursor, int offset) {
        LiveDatabase entity = new LiveDatabase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // limg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ltime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ldate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lbofang
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // lpanduan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LiveDatabase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLimg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLbofang(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLpanduan(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LiveDatabase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LiveDatabase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
